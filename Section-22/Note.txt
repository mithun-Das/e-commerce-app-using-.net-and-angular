

--------------> Section-22: Part-277 -> Setting up caching on the API <---------------

=> Future Task

	-> What will happen if we Inject all the services as Singleton


--------------> Section-22: Part-278 -> Creating a cache attribute class <---------------

-> we're going to be using this async action filter and filters allow code to be run before or after
   specific stages and request processing pipeline.And we've got the opportunity to run code immediately 
   before an action method is called and after a method has been executed.
   And we're going to do both because before the action method is called, we're going to want to see if
   we've got the thing that they're asking for inside our casche.
   And if we don't have it inside our cache, then we're going to execute the request and then the results
   of that we're going to put into our cache.
   So the next person who comes in asking for the same thing, we're just going to get the result from
   the cache.


-> And then instead of letting our request go to the controller, which is then going to ask our database
   for the response, we're simply going to retrieve this or we are retrieving it from memory and returning
   it straight to the client.
   So we're going to create our own content response that we're going to send directly from here.


=> Future Task

	-> Learn more about the CachedAttribute class
	-> Implement and Learn more about custom attribute class
	   src: https://www.pluralsight.com/guides/how-to-create-custom-attributes-csharp
 
	-> Action Method, IAsyncActionFilter
	   src: https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/filters?view=aspnetcore-7.0#action-filters
	   src: https://learn.microsoft.com/en-us/aspnet/core/mvc/controllers/actions?view=aspnetcore-7.0
	   src: https://www.tutorialsteacher.com/mvc/action-method-in-mvc


--------------> Section-22: Part-279 -> Testing the caching <---------------


-> Time Required For Product Type in Database: 119 ms
   Time Required For Product Brand in Database: 117 ms
   Time Required For Getting Product in Database: 13 ms

   Time Required For /api/products/brands In Redis: 12 ms
   Time Required For /api/products/types In Redis: 12 ms
   Time Required For /api/products In Redis: 2 ms


   Time Required For Product Type in Database: 119 ms
   Time Required For Product Brand in Database: 121 ms
   Time Required For Getting Single Product in Database: 17 ms

   Time Required For /api/products/types In Redis: 10 ms
   Time Required For /api/products/brands In Redis: 9 ms
   Time Required For /api/products In Redis: 1 ms



--------------> Section-22: Part-282 -> Caching on the client part 3 <---------------

-> ngModel is part of angular form module
   That's why we imported FormModule in Shared Module 