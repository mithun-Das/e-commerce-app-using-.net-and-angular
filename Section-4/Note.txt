
------------------> Section-4: Part-34 -> Creating a Generic repository and interface <------------------

-> public interface IGenericRepository<T> where T : BaseEntity
   what we can also do is constrain this so that we can use certain types with this particular generic repository.
   And the way that we do that is by specifying where.
   And we say is a type of in this case, we only want this to be usable by classes that derive from our base entity.

-> Future Task
   
	-> Learn more about generics
	   src: https://learn.microsoft.com/en-us/dotnet/standard/generics/


-------------> Section-4: Part-35 -> Implementing the methods in the Generic repository <-------------

-> Set<T>()
   Creates a <see cref="DbSet{TEntity}" /> that can be used to query and save instances of <typeparamref name="TEntity" />.


-------------> Section-4: Part-44 -> Adding AutoMapper to the API project <-------------

-> Automapper Injection
   src: https://www.udemy.com/course/learn-to-build-an-e-commerce-app-with-net-core-and-angular/learn/lecture/18137196#questions/18947440

-> Future Task
	
	-> Why we can't inject IConfiguration in constructor of Mapping Profiles
	   and also why it requires parameterless constructor


-------------> Section-4: Part-47 -> Serving static content from the API <-------------

-> app.UseStaticFiles() => We used this in the middleware before authentication because we haven't implemented any security yet.

-> Future Task

	-> Why we need to explicitly mention app.UseStaticFiles() in the middleware?
	   Shouldn't static files need to be served by default?