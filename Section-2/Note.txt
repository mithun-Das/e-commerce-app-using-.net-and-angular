
-------------> Section-2: Part-7 -> Running the API using the DotNet CLI <-------------

-> A valid https certificate comes with dotnet sdk


-------------> Section-2: Part-8 -> .Net 6 Project changes <-------------

-> What are the obj and bin folders (created by Visual Studio) used for?
   src: https://stackoverflow.com/questions/5308491/what-are-the-obj-and-bin-folders-created-by-visual-studio-used-for#:~:text=The%20obj%20folder%20holds%20object,to%20produce%20the%20final%20executable.

-> Global Using Directives in C#
   src: https://code-maze.com/csharp-global-using-directives/


-------------> Section-2: Part-9 -> Reviewing the Web API startup files <-------------

-> A Console application usually has a Main() method
   Why do we have a Main() method in ASP.NET core Web application	
   ASP.NET Core application starts as a Console application
   The Main() method configures ASP.NET Core and starts it and at that point it becomes an ASP.NET Core Web application.

-> The Build() method builds the web host that host the ASP.NET Core Web Application
-> The Run() method run the web application and starts listening the upcoming requests
-> CreateHostBuilder() method build the host

-> Kestrel server is given by SDK

-> What happens when a .net web application executes?
   src: https://www.youtube.com/watch?v=X60RR34gKy0
   src: https://www.youtube.com/watch?v=ydR2jd3ZaEA


-> Future Task

	-> Learn more about the hosting model



-------------> Section-2: Part-12 -> Setting up Entity Framework <-------------

-> We don't query our database directly in ASP.NET Core, we typically go through or via an object relational mapper.
   that abstracts the database away from our code.
   And this comes with several advantages, it's certainly one of the advantages is it allows us to very
   easily swap the database provider that we're using.

-> StoreContext : DbContext => A DbContext instance represents a session with the database and can be used to
   query and save instances of your entities. DbContext is a combination of the
   Unit Of Work and Repository patterns.

-> DbSet<Product> Products => A DbSet<TEntity> can be used to query and save instance of Product.
   Linq queries against a DbSet<TEntity> will be translated into queries against the database.

->  Future Task

	-> What is the function of DbContextOptions


-------------> Section-2: Part-13 -> Adding a connection string <-------------

-> GetConnectionString => Shorthand for GetSection("ConnectionStrings")[name].



----------> Section-2: Part-14 -> Adding an Entity Framework migration <----------

-> In real world projects, data models change as features get implemented: new entities or properties are added and removed, 
   and database schemas need to be changed accordingly to be kept in sync with the application.
   The migrations feature in EF Core provides a way to incrementally update the database schema to keep it in sync with the application's data model
   while preserving existing data in the database.
   Migrations Overview => https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli



----------> Section-2: Part-15 -> Updating the database <----------

-> dotnet ef database update(in dotnet ef tool) <=> Update-Database (in Visual Studio)