
-------------> Section-2: Part-7 -> Running the API using the DotNet CLI <-------------

-> A valid https certificate comes with dotnet sdk


-------------> Section-2: Part-8 -> .Net 6 Project changes <-------------

-> What are the obj and bin folders (created by Visual Studio) used for?
   src: https://stackoverflow.com/questions/5308491/what-are-the-obj-and-bin-folders-created-by-visual-studio-used-for#:~:text=The%20obj%20folder%20holds%20object,to%20produce%20the%20final%20executable.

-> Global Using Directives in C#
   src: https://code-maze.com/csharp-global-using-directives/


-------------> Section-2: Part-9 -> Reviewing the Web API startup files <-------------

-> A Console application usually has a Main() method
   Why do we have a Main() method in ASP.NET core Web application	
   ASP.NET Core application starts as a Console application
   The Main() method configures ASP.NET Core and starts it and at that point it becomes an ASP.NET Core Web application.

-> The Build() method builds the web host that host the ASP.NET Core Web Application
-> The Run() method run the web application and starts listening the upcoming requests
-> CreateHostBuilder() method build the host

-> Kestrel server is given by SDK

-> What happens when a .net web application executes?
   src: https://www.youtube.com/watch?v=X60RR34gKy0
   src: https://www.youtube.com/watch?v=ydR2jd3ZaEA


-> Future Task

	-> Learn more about the hosting model



-------------> Section-2: Part-12 -> Setting up Entity Framework <-------------

-> We don't query our database directly in ASP.NET Core, we typically go through or via an object relational mapper.
   that abstracts the database away from our code.
   And this comes with several advantages, it's certainly one of the advantages is it allows us to very
   easily swap the database provider that we're using.

-> StoreContext : DbContext => A DbContext instance represents a session with the database and can be used to
   query and save instances of your entities. DbContext is a combination of the
   Unit Of Work and Repository patterns.

-> DbSet<Product> Products => A DbSet<TEntity> can be used to query and save instance of Product.
   Linq queries against a DbSet<TEntity> will be translated into queries against the database.

->  Future Task

	-> What is the function of DbContextOptions


-------------> Section-2: Part-13 -> Adding a connection string <-------------

-> GetConnectionString => Shorthand for GetSection("ConnectionStrings")[name].



----------> Section-2: Part-14 -> Adding an Entity Framework migration <----------

-> In real world projects, data models change as features get implemented: new entities or properties are added and removed, 
   and database schemas need to be changed accordingly to be kept in sync with the application.
   The migrations feature in EF Core provides a way to incrementally update the database schema to keep it in sync with the application's data model
   while preserving existing data in the database.
   Migrations Overview => https://learn.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli



----------> Section-2: Part-15 -> Updating the database <----------

-> dotnet ef database update(in dotnet ef tool) <=> Update-Database (in Visual Studio)


----------> Section-2: Part-16 -> Reading the data from the Database in the API <----------

-> builder.Services.AddDbContext<StoreContext>
    (x => x.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));

   Here service lifetime of AddDbContext is scoped

-> when a request comes in, it hits our products controller.
   Then a new instance of this products controller is going to be created.
   And when this controller is created, it's going to see what its dependencies are.
   And in this case, it's got a dependency on the store context.
   And this is going to create a new instance of the store context that we can then work with.
   Now, ASP.NET core controls the lifetime of how long this store context is available and when we added
   this inside our Start-Up class.

-> ActionResult => And this means it's going to be some kind of HTTP response status.
   So it's going to be an OK response, which would be a 200 or it could be a 400, which would be a bad request.

-> var products = _context.Products.ToList();
   we've done here is Synchronoss request, which means that our request, the thread that our request
   is executing on is going to be blocked until this method has been completed and it's not going to do anything else.
   It's just going to wait until the request to sql has finished.

   Now, it's no problem in a tiny little application that we've got at the moment, it's perfectly fine.
   But in terms of scalability, then what we really want to do, especially for things like query our
   database where we don't have control of how long it's going to take.
   And if this query was complicated, that it could take a few seconds, possibly tens of seconds to return the results.
   And we don't want our request hanging around, waiting for that to come back if it could be doing other things.
   So what we can do is use an asynchronous version of this method.
   So instead of waiting for this to come back, it passes off the request to a delegate to somebody else.
   That delegate is going to go off and query the database.
   And in the meantime, the request that this thread is running on can go and handle other things.
   And once the request is completed, the delegate has completed its task.
   Then it notifies our method here, our request here, and then it picks up the results and it carries on.


-> Future Task

	-> Learn more about Task, async, await
	-> And also what ToListAsync means


----------> Section-2: Part-20 -> Summary of section 2 <----------

-> Future Task

	-> Code First approach
	-> Database First approach
	src: https://www.youtube.com/watch?v=Z7713GBhi4k&list=PL6n9fhu94yhUPBSX-E2aJCnCR3-_6zBZx&index=1
	src: https://www.youtube.com/watch?v=UNt3uWqMdMU&list=PL6n9fhu94yhUPBSX-E2aJCnCR3-_6zBZx&index=2
	src: https://www.youtube.com/watch?v=kbH-rqMl8cE&list=PL6n9fhu94yhUPBSX-E2aJCnCR3-_6zBZx&index=3